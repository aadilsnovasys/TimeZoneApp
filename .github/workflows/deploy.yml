name: Deploy to IIS

on:
  push:
    branches:
      - master  # Trigger on pushes to the master branch

jobs:
  deploy:
    runs-on: self-hosted  # Ensure this runner is on a Windows machine

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Build and Publish the app
      - name: Build and Publish
        run: dotnet publish -c Release -o published

      # Step 3: Deploy to IIS Server
      - name: Deploy to IIS (PowerShell)
        shell: powershell
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          # Decode Base64 password and create credentials
          $decodedPassword = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:SERVER_PASSWORD))
          $securePassword = ConvertTo-SecureString $decodedPassword -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($env:SERVER_USER, $securePassword)

          # Create a session with the remote server
          $session = New-PSSession -ComputerName $env:SERVER_HOST -Credential $credential

          Invoke-Command -Session $session -ScriptBlock {
              # Backup the existing application
              Write-Host "Backing up existing application..."
              New-Item -Path "C:\inetpub\TimeZoneApp\backup" -ItemType Directory -Force
              Move-Item -Path "C:\inetpub\TimeZoneApp\*" -Destination "C:\inetpub\TimeZoneApp\backup" -Force

              # Copy the published files
              Write-Host "Deploying new application files..."
              robocopy "C:\actions-runner\_work\TimeZoneApp\published" "C:\inetpub\TimeZoneApp" /mir

              # Restart IIS
              Write-Host "Restarting IIS..."
              iisreset
          }

          # Remove the session
          Remove-PSSession -Session $session
